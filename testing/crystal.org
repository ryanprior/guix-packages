- Bootstrap Dependencies
  + [ ] openssl-1.0.2q (have openssl-1.0.2u - maybe compat?)
  + [ ] ruby-1.9.3-p551
  + [ ] libevent-2.1.10-stable (have 2.1.11 - maybe compat?)
  + [ ] llvm-3.3 (already have 3.5.2)
  + [X] llvm-3.9.1 (already have 3.5.2)
  + [ ] pcl-1.12
  + [X] llvm-3.5.2
- Bootstrap Gem Dependencies
  + [ ] bundler-1.17.1 (have 2.1.4)
  + [ ] mime-types-1.25 (have 3.1)
  + [ ] rest-client-1.6.7 (have 2.0.2)
  + [ ] tins-0.9.0 (have 1.15.0)
  + [ ] term-ansicolor-1.2.2 (have 1.6.0)
  + [ ] multi_json-1.8.0 (have 1.13.1)
  + [ ] thor-0.18.1 (have 1.0.1)
  + [ ] simplecov-html-0.7.1 (have 0.10.2)
  + [ ] simplecov-0.7.1 (have 0.17.1)
  + [ ] coveralls-0.7.0 (have 0.8.23)
  + [ ] diff-lcs-1.2.4 (have 1.3)
  + [ ] ffi-1.9.0 (have 1.12.2)
  + [ ] json-1.7.7 (have 2.1.0)
  + [ ] levenshtein-ffi-1.0.2
  + [ ] rake-0.9.6 (have 13.0.1)
  + [ ] rspec-core-2.14.5 (have 2.14.8 - maybe compat?)
  + [ ] rspec-expectations-2.14.2 (have 2.14.5 - maybe compat?)
  + [ ] rspec-mocks-2.14.3 (have 2.14.6 - maybe compat?)
  + [X] rspec-2.14.1
  + [ ] ruby-graphviz-1.0.9
  + [ ] ruby-llvm-3.3.0.alpha
  + [ ] ruby-prof-0.13.0 (have 1.4.1)

* Questions

- Should we package these as standalone Guix packages or should they be hidden
  ~crystal-bootstrap-*~ packages?
- Is it preferable to have 160 bootstrap packages, one for each stage, or one
  big bootstrap package with 160 ~build-*~ stages, or somewhere inbetween?
- Each stage needs a different checkout of the git repository - can we
  preserve info in ~.git~ such that we can checkout again during the build, or
  do we want to have each checkout be an independent input to the package?
- How best can we use Guile macros to clean up the large amount of code
  implied by executing 160 stages of bootstrap logic?
